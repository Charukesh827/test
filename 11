import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import mean_squared_error , r2_score

def remove_outliers_iqr(df):
    Q1 = df.quantile(0.25)
    Q3 = df.quantile(0.75)
    IQR = Q3 - Q1
    outlier_condition = ((df < (Q1 - 1.5 * IQR)) | (df > (Q3 + 1.5 * IQR)))
    df_cleaned = df[~outlier_condition.any(axis=1)]
    return df_cleaned

df = pd.read_csv('/content/sample_data/california_housing_train.csv')
df.dropna(inplace=True)
df = remove_outliers_iqr(df)
X = df.drop('median_house_value',axis=1)
y = df['median_house_value']
scalar = StandardScaler()
X_scaled = scalar.fit_transform(X)
X_scaled_intercept = np.c_[np.ones((X_scaled.shape[0],1)),X_scaled]
theta = np.zeros((X_scaled_intercept.shape[1]))
learning = 0.01
iteration = 1000

def compute_cost(X, y, theta):
    m = len(y)
    h = np.dot(X, theta)
    cost = (1/(m)) * np.sum((h - y) ** 2)
    return cost

def gradient(X,y,theta,learning,iteration):
  cost_history = []
  for i in range(iteration):
    gradient = (1/len(y))*(np.dot(X.T , np.dot(X,theta) - y))
    theta = theta - learning*gradient
    cost = compute_cost(X,y,theta)
    cost_history.append(cost)
  return theta , cost_history

theta , cost = gradient(X_scaled_intercept,y,theta,learning,iteration)
plt.plot(range(1,iteration+1),cost)
plt.xlabel("Iterations")
plt.ylabel("Cost (MSE)")
plt.title("Cost function over Iterations")
plt.show()

splits = [(0.7,0.3),(0.6,0.4),(0.8,0.2)]

def evaluate(X,y,theta):
  h = np.dot(X,theta)
  return mean_squared_error(y,h) , r2_score(y,h)

for train , test in splits:
  X_train , X_test , y_train , y_test = train_test_split(X_scaled,y,test_size=test,random_state=42)
  X_train_intercept = np.c_[np.ones((X_train.shape[0],1)),X_train]
  X_test_intercept = np.c_[np.ones((X_test.shape[0],1)),X_test]
  theta = np.zeros((X_train_intercept.shape[1]))
  theta , _ = gradient(X_scaled_intercept,y,theta,learning,iteration)
  test_mse , test_r2 = evaluate(X_test_intercept,y_test,theta)
  print(f"Train size: {train}, Test size: {test}")
  print(f"Test MSE: {test_mse:.2f}")
  print(f"Test R^2: {test_r2:.2f}\n")

sns.pairplot(df)
plt.show()
sns.heatmap(df.corr(),annot=True,cmap="coolwarm")
plt.show()

